// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Message;
use URI;

glib_wrapper! {
    pub struct Auth(Object<soup_sys::SoupAuth, soup_sys::SoupAuthClass, AuthClass>);

    match fn {
        get_type => || soup_sys::soup_auth_get_type(),
    }
}

impl Auth {
    pub fn new<P: IsA<Message>>(type_: glib::types::Type, msg: &P, auth_header: &str) -> Option<Auth> {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(soup_sys::soup_auth_new(type_.to_glib(), msg.as_ref().to_glib_none().0, auth_header.to_glib_none().0))
        }
    }
}

pub const NONE_AUTH: Option<&Auth> = None;

pub trait AuthExt: 'static {
    fn authenticate(&self, username: &str, password: &str);

    #[cfg(any(feature = "v2_54", feature = "dox"))]
    fn can_authenticate(&self) -> bool;

    //fn free_protection_space(&self, space: /*Unimplemented*/&[&Fundamental: Pointer]);

    fn get_authorization<P: IsA<Message>>(&self, msg: &P) -> Option<GString>;

    fn get_host(&self) -> Option<GString>;

    fn get_info(&self) -> Option<GString>;

    fn get_protection_space(&self, source_uri: &mut URI) -> Vec<GString>;

    fn get_realm(&self) -> Option<GString>;

    fn get_saved_password(&self, user: &str) -> Option<GString>;

    fn get_saved_users(&self) -> Vec<GString>;

    fn get_scheme_name(&self) -> Option<GString>;

    fn has_saved_password(&self, username: &str, password: &str);

    fn is_authenticated(&self) -> bool;

    fn is_for_proxy(&self) -> bool;

    #[cfg(any(feature = "v2_42", feature = "dox"))]
    fn is_ready<P: IsA<Message>>(&self, msg: &P) -> bool;

    fn save_password(&self, username: &str, password: &str);

    fn update<P: IsA<Message>>(&self, msg: &P, auth_header: &str) -> bool;

    fn set_property_host(&self, host: Option<&str>);

    fn get_property_is_authenticated(&self) -> bool;

    fn get_property_is_for_proxy(&self) -> bool;

    fn set_property_is_for_proxy(&self, is_for_proxy: bool);

    fn set_property_realm(&self, realm: Option<&str>);

    fn connect_property_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_authenticated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_for_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_realm_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scheme_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Auth>> AuthExt for O {
    fn authenticate(&self, username: &str, password: &str) {
        unsafe {
            soup_sys::soup_auth_authenticate(self.as_ref().to_glib_none().0, username.to_glib_none().0, password.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_54", feature = "dox"))]
    fn can_authenticate(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_auth_can_authenticate(self.as_ref().to_glib_none().0))
        }
    }

    //fn free_protection_space(&self, space: /*Unimplemented*/&[&Fundamental: Pointer]) {
    //    unsafe { TODO: call soup_sys:soup_auth_free_protection_space() }
    //}

    fn get_authorization<P: IsA<Message>>(&self, msg: &P) -> Option<GString> {
        unsafe {
            from_glib_full(soup_sys::soup_auth_get_authorization(self.as_ref().to_glib_none().0, msg.as_ref().to_glib_none().0))
        }
    }

    fn get_host(&self) -> Option<GString> {
        unsafe {
            from_glib_none(soup_sys::soup_auth_get_host(self.as_ref().to_glib_none().0))
        }
    }

    fn get_info(&self) -> Option<GString> {
        unsafe {
            from_glib_full(soup_sys::soup_auth_get_info(self.as_ref().to_glib_none().0))
        }
    }

    fn get_protection_space(&self, source_uri: &mut URI) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(soup_sys::soup_auth_get_protection_space(self.as_ref().to_glib_none().0, source_uri.to_glib_none_mut().0))
        }
    }

    fn get_realm(&self) -> Option<GString> {
        unsafe {
            from_glib_none(soup_sys::soup_auth_get_realm(self.as_ref().to_glib_none().0))
        }
    }

    fn get_saved_password(&self, user: &str) -> Option<GString> {
        unsafe {
            from_glib_none(soup_sys::soup_auth_get_saved_password(self.as_ref().to_glib_none().0, user.to_glib_none().0))
        }
    }

    fn get_saved_users(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(soup_sys::soup_auth_get_saved_users(self.as_ref().to_glib_none().0))
        }
    }

    fn get_scheme_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(soup_sys::soup_auth_get_scheme_name(self.as_ref().to_glib_none().0))
        }
    }

    fn has_saved_password(&self, username: &str, password: &str) {
        unsafe {
            soup_sys::soup_auth_has_saved_password(self.as_ref().to_glib_none().0, username.to_glib_none().0, password.to_glib_none().0);
        }
    }

    fn is_authenticated(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_auth_is_authenticated(self.as_ref().to_glib_none().0))
        }
    }

    fn is_for_proxy(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_auth_is_for_proxy(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_42", feature = "dox"))]
    fn is_ready<P: IsA<Message>>(&self, msg: &P) -> bool {
        unsafe {
            from_glib(soup_sys::soup_auth_is_ready(self.as_ref().to_glib_none().0, msg.as_ref().to_glib_none().0))
        }
    }

    fn save_password(&self, username: &str, password: &str) {
        unsafe {
            soup_sys::soup_auth_save_password(self.as_ref().to_glib_none().0, username.to_glib_none().0, password.to_glib_none().0);
        }
    }

    fn update<P: IsA<Message>>(&self, msg: &P, auth_header: &str) -> bool {
        unsafe {
            from_glib(soup_sys::soup_auth_update(self.as_ref().to_glib_none().0, msg.as_ref().to_glib_none().0, auth_header.to_glib_none().0))
        }
    }

    fn set_property_host(&self, host: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"host\0".as_ptr() as *const _, Value::from(host).to_glib_none().0);
        }
    }

    fn get_property_is_authenticated(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-authenticated\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-authenticated` getter").unwrap()
        }
    }

    fn get_property_is_for_proxy(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-for-proxy\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-for-proxy` getter").unwrap()
        }
    }

    fn set_property_is_for_proxy(&self, is_for_proxy: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-for-proxy\0".as_ptr() as *const _, Value::from(&is_for_proxy).to_glib_none().0);
        }
    }

    fn set_property_realm(&self, realm: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"realm\0".as_ptr() as *const _, Value::from(realm).to_glib_none().0);
        }
    }

    fn connect_property_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_host_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuth, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Auth>
        {
            let f: &F = &*(f as *const F);
            f(&Auth::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::host\0".as_ptr() as *const _,
                Some(transmute(notify_host_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_is_authenticated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_authenticated_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuth, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Auth>
        {
            let f: &F = &*(f as *const F);
            f(&Auth::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-authenticated\0".as_ptr() as *const _,
                Some(transmute(notify_is_authenticated_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_is_for_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_for_proxy_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuth, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Auth>
        {
            let f: &F = &*(f as *const F);
            f(&Auth::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-for-proxy\0".as_ptr() as *const _,
                Some(transmute(notify_is_for_proxy_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_realm_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_realm_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuth, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Auth>
        {
            let f: &F = &*(f as *const F);
            f(&Auth::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::realm\0".as_ptr() as *const _,
                Some(transmute(notify_realm_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_scheme_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scheme_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuth, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Auth>
        {
            let f: &F = &*(f as *const F);
            f(&Auth::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scheme-name\0".as_ptr() as *const _,
                Some(transmute(notify_scheme_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Auth {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Auth")
    }
}
