// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::translate::*;
use soup_sys;
use std::fmt;
use Session;

glib_wrapper! {
    pub struct SessionSync(Object<soup_sys::SoupSessionSync, soup_sys::SoupSessionSyncClass, SessionSyncClass>) @extends Session;

    match fn {
        get_type => || soup_sys::soup_session_sync_get_type(),
    }
}

impl SessionSync {
    pub fn new() -> SessionSync {
        assert_initialized_main_thread!();
        unsafe {
            Session::from_glib_full(soup_sys::soup_session_sync_new()).unsafe_cast()
        }
    }

    //pub fn new_with_options(optname1: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> SessionSync {
    //    unsafe { TODO: call soup_sys:soup_session_sync_new_with_options() }
    //}
}

impl Default for SessionSync {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SESSION_SYNC: Option<&SessionSync> = None;

impl fmt::Display for SessionSync {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SessionSync")
    }
}
