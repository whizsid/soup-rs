// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use glib::StaticType;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v2_56", feature = "dox"))]
use std::mem::transmute;
use LoggerLogLevel;
use Message;
use Session;

glib_wrapper! {
    pub struct Logger(Object<soup_sys::SoupLogger, soup_sys::SoupLoggerClass, LoggerClass>);

    match fn {
        get_type => || soup_sys::soup_logger_get_type(),
    }
}

impl Logger {
    pub fn new(level: LoggerLogLevel, max_body_size: i32) -> Logger {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(soup_sys::soup_logger_new(level.to_glib(), max_body_size))
        }
    }
}

pub const NONE_LOGGER: Option<&Logger> = None;

pub trait LoggerExt: 'static {
    fn attach<P: IsA<Session>>(&self, session: &P);

    fn detach<P: IsA<Session>>(&self, session: &P);

    fn set_printer<P: Fn(&Logger, &LoggerLogLevel, glib::Char, &str) + 'static>(&self, printer: P);

    fn set_request_filter<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(&self, request_filter: P);

    fn set_response_filter<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(&self, response_filter: P);

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn get_property_level(&self) -> LoggerLogLevel;

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn set_property_level(&self, level: LoggerLogLevel);

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn get_property_max_body_size(&self) -> i32;

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn set_property_max_body_size(&self, max_body_size: i32);

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn connect_property_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn connect_property_max_body_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Logger>> LoggerExt for O {
    fn attach<P: IsA<Session>>(&self, session: &P) {
        unsafe {
            soup_sys::soup_logger_attach(self.as_ref().to_glib_none().0, session.as_ref().to_glib_none().0);
        }
    }

    fn detach<P: IsA<Session>>(&self, session: &P) {
        unsafe {
            soup_sys::soup_logger_detach(self.as_ref().to_glib_none().0, session.as_ref().to_glib_none().0);
        }
    }

    fn set_printer<P: Fn(&Logger, &LoggerLogLevel, glib::Char, &str) + 'static>(&self, printer: P) {
        let printer_data: Box_<P> = Box_::new(printer);
        unsafe extern "C" fn printer_func<P: Fn(&Logger, &LoggerLogLevel, glib::Char, &str) + 'static>(logger: *mut soup_sys::SoupLogger, level: soup_sys::SoupLoggerLogLevel, direction: libc::c_char, data: *const libc::c_char, user_data: glib_sys::gpointer) {
            let logger = from_glib_borrow(logger);
            let level = from_glib_borrow(level);
            let data: GString = from_glib_borrow(data);
            let callback: &P = &*(user_data as *mut _);
            (*callback)(&logger, &level, direction, data.as_str());
        }
        let printer = Some(printer_func::<P> as _);
        unsafe extern "C" fn destroy_func<P: Fn(&Logger, &LoggerLogLevel, glib::Char, &str) + 'static>(data: glib_sys::gpointer) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func::<P> as _);
        let super_callback0: Box_<P> = printer_data;
        unsafe {
            soup_sys::soup_logger_set_printer(self.as_ref().to_glib_none().0, printer, Box_::into_raw(super_callback0) as *mut _, destroy_call3);
        }
    }

    fn set_request_filter<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(&self, request_filter: P) {
        let request_filter_data: Box_<P> = Box_::new(request_filter);
        unsafe extern "C" fn request_filter_func<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(logger: *mut soup_sys::SoupLogger, msg: *mut soup_sys::SoupMessage, user_data: glib_sys::gpointer) -> soup_sys::SoupLoggerLogLevel {
            let logger = from_glib_borrow(logger);
            let msg = from_glib_borrow(msg);
            let callback: &P = &*(user_data as *mut _);
            let res = (*callback)(&logger, &msg);
            res.to_glib()
        }
        let request_filter = Some(request_filter_func::<P> as _);
        unsafe extern "C" fn destroy_func<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(data: glib_sys::gpointer) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func::<P> as _);
        let super_callback0: Box_<P> = request_filter_data;
        unsafe {
            soup_sys::soup_logger_set_request_filter(self.as_ref().to_glib_none().0, request_filter, Box_::into_raw(super_callback0) as *mut _, destroy_call3);
        }
    }

    fn set_response_filter<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(&self, response_filter: P) {
        let response_filter_data: Box_<P> = Box_::new(response_filter);
        unsafe extern "C" fn response_filter_func<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(logger: *mut soup_sys::SoupLogger, msg: *mut soup_sys::SoupMessage, user_data: glib_sys::gpointer) -> soup_sys::SoupLoggerLogLevel {
            let logger = from_glib_borrow(logger);
            let msg = from_glib_borrow(msg);
            let callback: &P = &*(user_data as *mut _);
            let res = (*callback)(&logger, &msg);
            res.to_glib()
        }
        let response_filter = Some(response_filter_func::<P> as _);
        unsafe extern "C" fn destroy_func<P: Fn(&Logger, &Message) -> LoggerLogLevel + 'static>(data: glib_sys::gpointer) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(destroy_func::<P> as _);
        let super_callback0: Box_<P> = response_filter_data;
        unsafe {
            soup_sys::soup_logger_set_response_filter(self.as_ref().to_glib_none().0, response_filter, Box_::into_raw(super_callback0) as *mut _, destroy_call3);
        }
    }

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn get_property_level(&self) -> LoggerLogLevel {
        unsafe {
            let mut value = Value::from_type(<LoggerLogLevel as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"level\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `level` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn set_property_level(&self, level: LoggerLogLevel) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"level\0".as_ptr() as *const _, Value::from(&level).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn get_property_max_body_size(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"max-body-size\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `max-body-size` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn set_property_max_body_size(&self, max_body_size: i32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"max-body-size\0".as_ptr() as *const _, Value::from(&max_body_size).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn connect_property_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_level_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupLogger, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Logger>
        {
            let f: &F = &*(f as *const F);
            f(&Logger::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::level\0".as_ptr() as *const _,
                Some(transmute(notify_level_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_56", feature = "dox"))]
    fn connect_property_max_body_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_body_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupLogger, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Logger>
        {
            let f: &F = &*(f as *const F);
            f(&Logger::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::max-body-size\0".as_ptr() as *const _,
                Some(transmute(notify_max_body_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Logger {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Logger")
    }
}
