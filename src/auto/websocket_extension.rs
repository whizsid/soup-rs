// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_68", feature = "dox"))]
use glib;
use glib::object::IsA;
use glib::translate::*;
#[cfg(any(feature = "v2_68", feature = "dox"))]
use glib::GString;
use soup_sys;
use std::fmt;
#[cfg(any(feature = "v2_68", feature = "dox"))]
use std::ptr;

glib_wrapper! {
    pub struct WebsocketExtension(Object<soup_sys::SoupWebsocketExtension, soup_sys::SoupWebsocketExtensionClass, WebsocketExtensionClass>);

    match fn {
        get_type => || soup_sys::soup_websocket_extension_get_type(),
    }
}

pub const NONE_WEBSOCKET_EXTENSION: Option<&WebsocketExtension> = None;

pub trait WebsocketExtensionExt: 'static {
    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //fn configure(&self, connection_type: WebsocketConnectionType, params: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<(), glib::Error>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn get_request_params(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn get_response_params(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn process_incoming_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn process_outgoing_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error>;
}

impl<O: IsA<WebsocketExtension>> WebsocketExtensionExt for O {
    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //fn configure(&self, connection_type: WebsocketConnectionType, params: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_websocket_extension_configure() }
    //}

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn get_request_params(&self) -> Option<GString> {
        unsafe {
            from_glib_full(soup_sys::soup_websocket_extension_get_request_params(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn get_response_params(&self) -> Option<GString> {
        unsafe {
            from_glib_full(soup_sys::soup_websocket_extension_get_response_params(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn process_incoming_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = soup_sys::soup_websocket_extension_process_incoming_message(self.as_ref().to_glib_none().0, header, payload.to_glib_full(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn process_outgoing_message(&self, header: &mut u8, payload: &glib::Bytes) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = soup_sys::soup_websocket_extension_process_outgoing_message(self.as_ref().to_glib_none().0, header, payload.to_glib_full(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for WebsocketExtension {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebsocketExtension")
    }
}
