// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v2_68", feature = "dox"))]
use glib::GString;
use glib_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Message;

glib_wrapper! {
    pub struct HSTSEnforcer(Object<soup_sys::SoupHSTSEnforcer, soup_sys::SoupHSTSEnforcerClass, HSTSEnforcerClass>);

    match fn {
        get_type => || soup_sys::soup_hsts_enforcer_get_type(),
    }
}

impl HSTSEnforcer {
    #[cfg(any(feature = "v2_68", feature = "dox"))]
    pub fn new() -> HSTSEnforcer {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(soup_sys::soup_hsts_enforcer_new())
        }
    }
}

#[cfg(any(feature = "v2_68", feature = "dox"))]
impl Default for HSTSEnforcer {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_HSTS_ENFORCER: Option<&HSTSEnforcer> = None;

pub trait HSTSEnforcerExt: 'static {
    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn get_domains(&self, session_policies: bool) -> Vec<GString>;

    //#[cfg(any(feature = "v2_68", feature = "dox"))]
    //fn get_policies(&self, session_policies: bool) -> /*Ignored*/Vec<HSTSPolicy>;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn has_valid_policy(&self, domain: &str) -> bool;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn is_persistent(&self) -> bool;

    //#[cfg(any(feature = "v2_68", feature = "dox"))]
    //fn set_policy(&self, policy: /*Ignored*/&mut HSTSPolicy);

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn set_session_policy(&self, domain: &str, include_subdomains: bool);

    //fn connect_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_hsts_enforced<F: Fn(&Self, &Message) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<HSTSEnforcer>> HSTSEnforcerExt for O {
    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn get_domains(&self, session_policies: bool) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(soup_sys::soup_hsts_enforcer_get_domains(self.as_ref().to_glib_none().0, session_policies.to_glib()))
        }
    }

    //#[cfg(any(feature = "v2_68", feature = "dox"))]
    //fn get_policies(&self, session_policies: bool) -> /*Ignored*/Vec<HSTSPolicy> {
    //    unsafe { TODO: call soup_sys:soup_hsts_enforcer_get_policies() }
    //}

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn has_valid_policy(&self, domain: &str) -> bool {
        unsafe {
            from_glib(soup_sys::soup_hsts_enforcer_has_valid_policy(self.as_ref().to_glib_none().0, domain.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn is_persistent(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_hsts_enforcer_is_persistent(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_68", feature = "dox"))]
    //fn set_policy(&self, policy: /*Ignored*/&mut HSTSPolicy) {
    //    unsafe { TODO: call soup_sys:soup_hsts_enforcer_set_policy() }
    //}

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn set_session_policy(&self, domain: &str, include_subdomains: bool) {
        unsafe {
            soup_sys::soup_hsts_enforcer_set_session_policy(self.as_ref().to_glib_none().0, domain.to_glib_none().0, include_subdomains.to_glib());
        }
    }

    //fn connect_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored old_policy: Soup.HSTSPolicy
    //    Ignored new_policy: Soup.HSTSPolicy
    //}

    fn connect_hsts_enforced<F: Fn(&Self, &Message) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hsts_enforced_trampoline<P, F: Fn(&P, &Message) + 'static>(this: *mut soup_sys::SoupHSTSEnforcer, message: *mut soup_sys::SoupMessage, f: glib_sys::gpointer)
            where P: IsA<HSTSEnforcer>
        {
            let f: &F = &*(f as *const F);
            f(&HSTSEnforcer::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(message))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hsts-enforced\0".as_ptr() as *const _,
                Some(transmute(hsts_enforced_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for HSTSEnforcer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "HSTSEnforcer")
    }
}
