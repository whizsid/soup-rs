// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use AuthDomain;

glib_wrapper! {
    pub struct AuthDomainBasic(Object<soup_sys::SoupAuthDomainBasic, soup_sys::SoupAuthDomainBasicClass, AuthDomainBasicClass>) @extends AuthDomain;

    match fn {
        get_type => || soup_sys::soup_auth_domain_basic_get_type(),
    }
}

impl AuthDomainBasic {
    //pub fn new(optname1: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> AuthDomainBasic {
    //    unsafe { TODO: call soup_sys:soup_auth_domain_basic_new() }
    //}
}

pub const NONE_AUTH_DOMAIN_BASIC: Option<&AuthDomainBasic> = None;

pub trait AuthDomainBasicExt: 'static {
    fn get_property_auth_callback(&self) -> Fn(&AuthDomainBasic, &Message, &str, &str) -> bool + 'static;

    fn set_property_auth_callback(&self, auth_callback: Fn(&AuthDomainBasic, &Message, &str, &str) -> bool + 'static);

    //fn get_property_auth_data(&self) -> /*Unimplemented*/Fundamental: Pointer;

    //fn set_property_auth_data(&self, auth_data: /*Unimplemented*/Fundamental: Pointer);

    fn connect_property_auth_callback_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_auth_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<AuthDomainBasic>> AuthDomainBasicExt for O {
    fn get_property_auth_callback(&self) -> Fn(&AuthDomainBasic, &Message, &str, &str) -> bool + 'static {
        unsafe {
            let mut value = Value::from_type(<Fn(&AuthDomainBasic, &Message, &str, &str) -> bool + 'static as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"auth-callback\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `auth-callback` getter").unwrap()
        }
    }

    fn set_property_auth_callback(&self, auth_callback: Fn(&AuthDomainBasic, &Message, &str, &str) -> bool + 'static) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"auth-callback\0".as_ptr() as *const _, Value::from(&auth_callback).to_glib_none().0);
        }
    }

    //fn get_property_auth_data(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"auth-data\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `auth-data` getter").unwrap()
    //    }
    //}

    //fn set_property_auth_data(&self, auth_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"auth-data\0".as_ptr() as *const _, Value::from(&auth_data).to_glib_none().0);
    //    }
    //}

    fn connect_property_auth_callback_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_auth_callback_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuthDomainBasic, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<AuthDomainBasic>
        {
            let f: &F = &*(f as *const F);
            f(&AuthDomainBasic::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::auth-callback\0".as_ptr() as *const _,
                Some(transmute(notify_auth_callback_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_auth_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_auth_data_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupAuthDomainBasic, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<AuthDomainBasic>
        {
            let f: &F = &*(f as *const F);
            f(&AuthDomainBasic::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::auth-data\0".as_ptr() as *const _,
                Some(transmute(notify_auth_data_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for AuthDomainBasic {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AuthDomainBasic")
    }
}
