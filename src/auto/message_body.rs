// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use gobject_sys;
use soup_sys;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MessageBody(Boxed<soup_sys::SoupMessageBody>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(soup_sys::soup_message_body_get_type(), ptr as *mut _) as *mut soup_sys::SoupMessageBody,
        free => |ptr| gobject_sys::g_boxed_free(soup_sys::soup_message_body_get_type(), ptr as *mut _),
        get_type => || soup_sys::soup_message_body_get_type(),
    }
}

impl MessageBody {
    pub fn new() -> MessageBody {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(soup_sys::soup_message_body_new())
        }
    }

    //pub fn append_buffer(&mut self, buffer: /*Ignored*/&mut Buffer) {
    //    unsafe { TODO: call soup_sys:soup_message_body_append_buffer() }
    //}

    #[cfg(any(feature = "v2_32", feature = "dox"))]
    pub fn append_take(&mut self, data: &[u8]) {
        let length = data.len() as usize;
        unsafe {
            soup_sys::soup_message_body_append_take(self.to_glib_none_mut().0, data.to_glib_full(), length);
        }
    }

    pub fn complete(&mut self) {
        unsafe {
            soup_sys::soup_message_body_complete(self.to_glib_none_mut().0);
        }
    }

    //pub fn flatten(&mut self) -> /*Ignored*/Option<Buffer> {
    //    unsafe { TODO: call soup_sys:soup_message_body_flatten() }
    //}

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    pub fn get_accumulate(&mut self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_message_body_get_accumulate(self.to_glib_none_mut().0))
        }
    }

    //pub fn get_chunk(&mut self, offset: i64) -> /*Ignored*/Option<Buffer> {
    //    unsafe { TODO: call soup_sys:soup_message_body_get_chunk() }
    //}

    //#[cfg(any(feature = "v2_24", feature = "dox"))]
    //pub fn got_chunk(&mut self, chunk: /*Ignored*/&mut Buffer) {
    //    unsafe { TODO: call soup_sys:soup_message_body_got_chunk() }
    //}

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    pub fn set_accumulate(&mut self, accumulate: bool) {
        unsafe {
            soup_sys::soup_message_body_set_accumulate(self.to_glib_none_mut().0, accumulate.to_glib());
        }
    }

    pub fn truncate(&mut self) {
        unsafe {
            soup_sys::soup_message_body_truncate(self.to_glib_none_mut().0);
        }
    }

    //#[cfg(any(feature = "v2_24", feature = "dox"))]
    //pub fn wrote_chunk(&mut self, chunk: /*Ignored*/&mut Buffer) {
    //    unsafe { TODO: call soup_sys:soup_message_body_wrote_chunk() }
    //}
}

impl Default for MessageBody {
    fn default() -> Self {
        Self::new()
    }
}
