// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
#[cfg(any(feature = "v2_48", feature = "dox"))]
use std::ptr;
use Address;
use AuthDomain;
use Message;
use Socket;
#[cfg(any(feature = "v2_48", feature = "dox"))]
use URI;

glib_wrapper! {
    pub struct Server(Object<soup_sys::SoupServer, soup_sys::SoupServerClass, ServerClass>);

    match fn {
        get_type => || soup_sys::soup_server_get_type(),
    }
}

impl Server {
    //pub fn new(optname1: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Option<Server> {
    //    unsafe { TODO: call soup_sys:soup_server_new() }
    //}
}

pub const NONE_SERVER: Option<&Server> = None;

pub trait ServerExt: 'static {
    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //fn accept_iostream(&self, stream: /*Ignored*/&gio::IOStream, local_addr: /*Ignored*/Option<&gio::SocketAddress>, remote_addr: /*Ignored*/Option<&gio::SocketAddress>) -> Result<(), glib::Error>;

    fn add_auth_domain<P: IsA<AuthDomain>>(&self, auth_domain: &P);

    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //fn add_early_handler(&self, path: Option<&str>, callback: /*Unimplemented*/Fn(&Server, &Message, &str, /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, /*Ignored*/ClientContext), user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    //fn add_handler(&self, path: Option<&str>, callback: /*Unimplemented*/Fn(&Server, &Message, &str, /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, /*Ignored*/ClientContext), user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn add_websocket_extension(&self, extension_type: glib::types::Type);

    //fn add_websocket_handler(&self, path: Option<&str>, origin: Option<&str>, protocols: &[&str], callback: /*Unimplemented*/Fn(&Server, &WebsocketConnection, &str, /*Ignored*/ClientContext), user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    fn disconnect(&self);

    fn get_async_context(&self) -> Option<glib::MainContext>;

    fn get_listener(&self) -> Option<Socket>;

    //fn get_listeners(&self) -> /*Ignored*/Vec<gio::Socket>;

    fn get_port(&self) -> u32;

    #[cfg(any(feature = "v2_48", feature = "dox"))]
    fn get_uris(&self) -> Vec<URI>;

    fn is_https(&self) -> bool;

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen(&self, address: /*Ignored*/&gio::SocketAddress, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error>;

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_all(&self, port: u32, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error>;

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_fd(&self, fd: i32, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error>;

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_local(&self, port: u32, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error>;

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_socket(&self, socket: /*Ignored*/&gio::Socket, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error>;

    fn pause_message<P: IsA<Message>>(&self, msg: &P);

    fn quit(&self);

    fn remove_auth_domain<P: IsA<AuthDomain>>(&self, auth_domain: &P);

    fn remove_handler(&self, path: &str);

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn remove_websocket_extension(&self, extension_type: glib::types::Type);

    fn run(&self);

    fn run_async(&self);

    #[cfg(any(feature = "v2_48", feature = "dox"))]
    fn set_ssl_cert_file(&self, ssl_cert_file: &str, ssl_key_file: &str) -> Result<(), glib::Error>;

    fn unpause_message<P: IsA<Message>>(&self, msg: &P);

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn set_property_add_websocket_extension(&self, add_websocket_extension: glib::types::Type);

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn get_property_http_aliases(&self) -> Vec<GString>;

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn set_property_http_aliases(&self, http_aliases: &[&str]);

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn get_property_https_aliases(&self) -> Vec<GString>;

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn set_property_https_aliases(&self, https_aliases: &[&str]);

    fn get_property_interface(&self) -> Option<Address>;

    fn get_property_raw_paths(&self) -> bool;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn set_property_remove_websocket_extension(&self, remove_websocket_extension: glib::types::Type);

    fn get_property_server_header(&self) -> Option<GString>;

    fn set_property_server_header(&self, server_header: Option<&str>);

    fn get_property_ssl_cert_file(&self) -> Option<GString>;

    fn get_property_ssl_key_file(&self) -> Option<GString>;

    //#[cfg(any(feature = "v2_38", feature = "dox"))]
    //fn get_property_tls_certificate(&self) -> /*Ignored*/Option<gio::TlsCertificate>;

    //fn connect_request_aborted<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_request_finished<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_request_read<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_request_started<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn connect_property_add_websocket_extension_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn connect_property_http_aliases_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn connect_property_https_aliases_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn connect_property_remove_websocket_extension_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_server_header_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Server>> ServerExt for O {
    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //fn accept_iostream(&self, stream: /*Ignored*/&gio::IOStream, local_addr: /*Ignored*/Option<&gio::SocketAddress>, remote_addr: /*Ignored*/Option<&gio::SocketAddress>) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_server_accept_iostream() }
    //}

    fn add_auth_domain<P: IsA<AuthDomain>>(&self, auth_domain: &P) {
        unsafe {
            soup_sys::soup_server_add_auth_domain(self.as_ref().to_glib_none().0, auth_domain.as_ref().to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v2_50", feature = "dox"))]
    //fn add_early_handler(&self, path: Option<&str>, callback: /*Unimplemented*/Fn(&Server, &Message, &str, /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, /*Ignored*/ClientContext), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call soup_sys:soup_server_add_early_handler() }
    //}

    //fn add_handler(&self, path: Option<&str>, callback: /*Unimplemented*/Fn(&Server, &Message, &str, /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, /*Ignored*/ClientContext), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call soup_sys:soup_server_add_handler() }
    //}

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn add_websocket_extension(&self, extension_type: glib::types::Type) {
        unsafe {
            soup_sys::soup_server_add_websocket_extension(self.as_ref().to_glib_none().0, extension_type.to_glib());
        }
    }

    //fn add_websocket_handler(&self, path: Option<&str>, origin: Option<&str>, protocols: &[&str], callback: /*Unimplemented*/Fn(&Server, &WebsocketConnection, &str, /*Ignored*/ClientContext), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call soup_sys:soup_server_add_websocket_handler() }
    //}

    fn disconnect(&self) {
        unsafe {
            soup_sys::soup_server_disconnect(self.as_ref().to_glib_none().0);
        }
    }

    fn get_async_context(&self) -> Option<glib::MainContext> {
        unsafe {
            from_glib_none(soup_sys::soup_server_get_async_context(self.as_ref().to_glib_none().0))
        }
    }

    fn get_listener(&self) -> Option<Socket> {
        unsafe {
            from_glib_none(soup_sys::soup_server_get_listener(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_listeners(&self) -> /*Ignored*/Vec<gio::Socket> {
    //    unsafe { TODO: call soup_sys:soup_server_get_listeners() }
    //}

    fn get_port(&self) -> u32 {
        unsafe {
            soup_sys::soup_server_get_port(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_48", feature = "dox"))]
    fn get_uris(&self) -> Vec<URI> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(soup_sys::soup_server_get_uris(self.as_ref().to_glib_none().0))
        }
    }

    fn is_https(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_server_is_https(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen(&self, address: /*Ignored*/&gio::SocketAddress, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_server_listen() }
    //}

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_all(&self, port: u32, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_server_listen_all() }
    //}

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_fd(&self, fd: i32, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_server_listen_fd() }
    //}

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_local(&self, port: u32, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_server_listen_local() }
    //}

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //fn listen_socket(&self, socket: /*Ignored*/&gio::Socket, options: /*Ignored*/ServerListenOptions) -> Result<(), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_server_listen_socket() }
    //}

    fn pause_message<P: IsA<Message>>(&self, msg: &P) {
        unsafe {
            soup_sys::soup_server_pause_message(self.as_ref().to_glib_none().0, msg.as_ref().to_glib_none().0);
        }
    }

    fn quit(&self) {
        unsafe {
            soup_sys::soup_server_quit(self.as_ref().to_glib_none().0);
        }
    }

    fn remove_auth_domain<P: IsA<AuthDomain>>(&self, auth_domain: &P) {
        unsafe {
            soup_sys::soup_server_remove_auth_domain(self.as_ref().to_glib_none().0, auth_domain.as_ref().to_glib_none().0);
        }
    }

    fn remove_handler(&self, path: &str) {
        unsafe {
            soup_sys::soup_server_remove_handler(self.as_ref().to_glib_none().0, path.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn remove_websocket_extension(&self, extension_type: glib::types::Type) {
        unsafe {
            soup_sys::soup_server_remove_websocket_extension(self.as_ref().to_glib_none().0, extension_type.to_glib());
        }
    }

    fn run(&self) {
        unsafe {
            soup_sys::soup_server_run(self.as_ref().to_glib_none().0);
        }
    }

    fn run_async(&self) {
        unsafe {
            soup_sys::soup_server_run_async(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_48", feature = "dox"))]
    fn set_ssl_cert_file(&self, ssl_cert_file: &str, ssl_key_file: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = soup_sys::soup_server_set_ssl_cert_file(self.as_ref().to_glib_none().0, ssl_cert_file.to_glib_none().0, ssl_key_file.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn unpause_message<P: IsA<Message>>(&self, msg: &P) {
        unsafe {
            soup_sys::soup_server_unpause_message(self.as_ref().to_glib_none().0, msg.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn set_property_add_websocket_extension(&self, add_websocket_extension: glib::types::Type) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"add-websocket-extension\0".as_ptr() as *const _, Value::from(&add_websocket_extension).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn get_property_http_aliases(&self) -> Vec<GString> {
        unsafe {
            let mut value = Value::from_type(<Vec<GString> as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"http-aliases\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `http-aliases` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn set_property_http_aliases(&self, http_aliases: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"http-aliases\0".as_ptr() as *const _, Value::from(http_aliases).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn get_property_https_aliases(&self) -> Vec<GString> {
        unsafe {
            let mut value = Value::from_type(<Vec<GString> as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"https-aliases\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `https-aliases` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn set_property_https_aliases(&self, https_aliases: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"https-aliases\0".as_ptr() as *const _, Value::from(https_aliases).to_glib_none().0);
        }
    }

    fn get_property_interface(&self) -> Option<Address> {
        unsafe {
            let mut value = Value::from_type(<Address as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"interface\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `interface` getter")
        }
    }

    fn get_property_raw_paths(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"raw-paths\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `raw-paths` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn set_property_remove_websocket_extension(&self, remove_websocket_extension: glib::types::Type) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"remove-websocket-extension\0".as_ptr() as *const _, Value::from(&remove_websocket_extension).to_glib_none().0);
        }
    }

    fn get_property_server_header(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"server-header\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `server-header` getter")
        }
    }

    fn set_property_server_header(&self, server_header: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"server-header\0".as_ptr() as *const _, Value::from(server_header).to_glib_none().0);
        }
    }

    fn get_property_ssl_cert_file(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ssl-cert-file\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `ssl-cert-file` getter")
        }
    }

    fn get_property_ssl_key_file(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ssl-key-file\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `ssl-key-file` getter")
        }
    }

    //#[cfg(any(feature = "v2_38", feature = "dox"))]
    //fn get_property_tls_certificate(&self) -> /*Ignored*/Option<gio::TlsCertificate> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"tls-certificate\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `tls-certificate` getter")
    //    }
    //}

    //fn connect_request_aborted<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored client: Soup.ClientContext
    //}

    //fn connect_request_finished<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored client: Soup.ClientContext
    //}

    //fn connect_request_read<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored client: Soup.ClientContext
    //}

    //fn connect_request_started<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored client: Soup.ClientContext
    //}

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn connect_property_add_websocket_extension_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_add_websocket_extension_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupServer, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Server>
        {
            let f: &F = &*(f as *const F);
            f(&Server::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::add-websocket-extension\0".as_ptr() as *const _,
                Some(transmute(notify_add_websocket_extension_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn connect_property_http_aliases_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_http_aliases_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupServer, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Server>
        {
            let f: &F = &*(f as *const F);
            f(&Server::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::http-aliases\0".as_ptr() as *const _,
                Some(transmute(notify_http_aliases_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_44", feature = "dox"))]
    fn connect_property_https_aliases_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_https_aliases_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupServer, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Server>
        {
            let f: &F = &*(f as *const F);
            f(&Server::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::https-aliases\0".as_ptr() as *const _,
                Some(transmute(notify_https_aliases_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn connect_property_remove_websocket_extension_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remove_websocket_extension_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupServer, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Server>
        {
            let f: &F = &*(f as *const F);
            f(&Server::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::remove-websocket-extension\0".as_ptr() as *const _,
                Some(transmute(notify_remove_websocket_extension_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_server_header_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_server_header_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupServer, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Server>
        {
            let f: &F = &*(f as *const F);
            f(&Server::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::server-header\0".as_ptr() as *const _,
                Some(transmute(notify_server_header_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Server {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Server")
    }
}
