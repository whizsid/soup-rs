// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use soup_sys;
use std::fmt;
#[cfg(any(feature = "v2_40", feature = "dox"))]
use Message;
use Request;

glib_wrapper! {
    pub struct RequestHTTP(Object<soup_sys::SoupRequestHTTP, soup_sys::SoupRequestHTTPClass, RequestHTTPClass>) @extends Request;

    match fn {
        get_type => || soup_sys::soup_request_http_get_type(),
    }
}

pub const NONE_REQUEST_HTTP: Option<&RequestHTTP> = None;

pub trait RequestHTTPExt: 'static {
    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn get_message(&self) -> Option<Message>;
}

impl<O: IsA<RequestHTTP>> RequestHTTPExt for O {
    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn get_message(&self) -> Option<Message> {
        unsafe {
            from_glib_full(soup_sys::soup_request_http_get_message(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for RequestHTTP {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RequestHTTP")
    }
}
