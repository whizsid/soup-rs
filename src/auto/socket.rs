// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Address;

glib_wrapper! {
    pub struct Socket(Object<soup_sys::SoupSocket, soup_sys::SoupSocketClass, SocketClass>);

    match fn {
        get_type => || soup_sys::soup_socket_get_type(),
    }
}

impl Socket {
    //pub fn new(optname1: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Socket {
    //    unsafe { TODO: call soup_sys:soup_socket_new() }
    //}
}

pub const NONE_SOCKET: Option<&Socket> = None;

pub trait SocketExt: 'static {
    fn connect_async<P: IsA<gio::Cancellable>, Q: FnOnce(&Socket, u32) + 'static>(&self, cancellable: Option<&P>, callback: Q);

    fn connect_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> u32;

    fn disconnect(&self);

    fn get_fd(&self) -> i32;

    fn get_local_address(&self) -> Option<Address>;

    fn get_remote_address(&self) -> Option<Address>;

    fn is_connected(&self) -> bool;

    fn is_ssl(&self) -> bool;

    fn listen(&self) -> bool;

    //fn read_until<P: IsA<gio::Cancellable>>(&self, buffer: &[u8], boundary: /*Unimplemented*/Option<Fundamental: Pointer>, boundary_len: usize, got_boundary: bool, cancellable: Option<&P>) -> Result<(SocketIOStatus, usize), glib::Error>;

    fn start_proxy_ssl<P: IsA<gio::Cancellable>>(&self, ssl_host: &str, cancellable: Option<&P>) -> bool;

    fn start_ssl<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> bool;

    //fn get_property_async_context(&self) -> /*Unimplemented*/Fundamental: Pointer;

    fn get_property_ipv6_only(&self) -> bool;

    fn set_property_ipv6_only(&self, ipv6_only: bool);

    fn get_property_is_server(&self) -> bool;

    fn get_property_non_blocking(&self) -> bool;

    fn set_property_non_blocking(&self, non_blocking: bool);

    //fn get_property_ssl_creds(&self) -> /*Unimplemented*/Fundamental: Pointer;

    //fn set_property_ssl_creds(&self, ssl_creds: /*Unimplemented*/Fundamental: Pointer);

    fn get_property_ssl_fallback(&self) -> bool;

    fn get_property_ssl_strict(&self) -> bool;

    fn get_property_timeout(&self) -> u32;

    fn set_property_timeout(&self, timeout: u32);

    fn get_property_tls_certificate(&self) -> Option<gio::TlsCertificate>;

    fn get_property_tls_errors(&self) -> gio::TlsCertificateFlags;

    fn get_property_trusted_certificate(&self) -> bool;

    #[cfg(any(feature = "v2_38", feature = "dox"))]
    fn get_property_use_thread_context(&self) -> bool;

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //#[cfg(any(feature = "v2_38", feature = "dox"))]
    //fn connect_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_new_connection<F: Fn(&Self, &Socket) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_readable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_writable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ipv6_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_server_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_non_blocking_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ssl_creds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tls_certificate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tls_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_trusted_certificate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Socket>> SocketExt for O {
    fn connect_async<P: IsA<gio::Cancellable>, Q: FnOnce(&Socket, u32) + 'static>(&self, cancellable: Option<&P>, callback: Q) {
        let callback_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn callback_func<P: IsA<gio::Cancellable>, Q: FnOnce(&Socket, u32) + 'static>(sock: *mut soup_sys::SoupSocket, status: libc::c_uint, user_data: glib_sys::gpointer) {
            let sock = from_glib_borrow(sock);
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            (*callback)(&sock, status);
        }
        let callback = Some(callback_func::<P, Q> as _);
        let super_callback0: Box_<Q> = callback_data;
        unsafe {
            soup_sys::soup_socket_connect_async(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, callback, Box_::into_raw(super_callback0) as *mut _);
        }
    }

    fn connect_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> u32 {
        unsafe {
            soup_sys::soup_socket_connect_sync(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0)
        }
    }

    fn disconnect(&self) {
        unsafe {
            soup_sys::soup_socket_disconnect(self.as_ref().to_glib_none().0);
        }
    }

    fn get_fd(&self) -> i32 {
        unsafe {
            soup_sys::soup_socket_get_fd(self.as_ref().to_glib_none().0)
        }
    }

    fn get_local_address(&self) -> Option<Address> {
        unsafe {
            from_glib_none(soup_sys::soup_socket_get_local_address(self.as_ref().to_glib_none().0))
        }
    }

    fn get_remote_address(&self) -> Option<Address> {
        unsafe {
            from_glib_none(soup_sys::soup_socket_get_remote_address(self.as_ref().to_glib_none().0))
        }
    }

    fn is_connected(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_socket_is_connected(self.as_ref().to_glib_none().0))
        }
    }

    fn is_ssl(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_socket_is_ssl(self.as_ref().to_glib_none().0))
        }
    }

    fn listen(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_socket_listen(self.as_ref().to_glib_none().0))
        }
    }

    //fn read_until<P: IsA<gio::Cancellable>>(&self, buffer: &[u8], boundary: /*Unimplemented*/Option<Fundamental: Pointer>, boundary_len: usize, got_boundary: bool, cancellable: Option<&P>) -> Result<(SocketIOStatus, usize), glib::Error> {
    //    unsafe { TODO: call soup_sys:soup_socket_read_until() }
    //}

    fn start_proxy_ssl<P: IsA<gio::Cancellable>>(&self, ssl_host: &str, cancellable: Option<&P>) -> bool {
        unsafe {
            from_glib(soup_sys::soup_socket_start_proxy_ssl(self.as_ref().to_glib_none().0, ssl_host.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    fn start_ssl<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> bool {
        unsafe {
            from_glib(soup_sys::soup_socket_start_ssl(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    //fn get_property_async_context(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"async-context\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `async-context` getter").unwrap()
    //    }
    //}

    fn get_property_ipv6_only(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ipv6-only\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `ipv6-only` getter").unwrap()
        }
    }

    fn set_property_ipv6_only(&self, ipv6_only: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ipv6-only\0".as_ptr() as *const _, Value::from(&ipv6_only).to_glib_none().0);
        }
    }

    fn get_property_is_server(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-server\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-server` getter").unwrap()
        }
    }

    fn get_property_non_blocking(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"non-blocking\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `non-blocking` getter").unwrap()
        }
    }

    fn set_property_non_blocking(&self, non_blocking: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"non-blocking\0".as_ptr() as *const _, Value::from(&non_blocking).to_glib_none().0);
        }
    }

    //fn get_property_ssl_creds(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ssl-creds\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `ssl-creds` getter").unwrap()
    //    }
    //}

    //fn set_property_ssl_creds(&self, ssl_creds: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ssl-creds\0".as_ptr() as *const _, Value::from(&ssl_creds).to_glib_none().0);
    //    }
    //}

    fn get_property_ssl_fallback(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ssl-fallback\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `ssl-fallback` getter").unwrap()
        }
    }

    fn get_property_ssl_strict(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ssl-strict\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `ssl-strict` getter").unwrap()
        }
    }

    fn get_property_timeout(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"timeout\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `timeout` getter").unwrap()
        }
    }

    fn set_property_timeout(&self, timeout: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"timeout\0".as_ptr() as *const _, Value::from(&timeout).to_glib_none().0);
        }
    }

    fn get_property_tls_certificate(&self) -> Option<gio::TlsCertificate> {
        unsafe {
            let mut value = Value::from_type(<gio::TlsCertificate as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"tls-certificate\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `tls-certificate` getter")
        }
    }

    fn get_property_tls_errors(&self) -> gio::TlsCertificateFlags {
        unsafe {
            let mut value = Value::from_type(<gio::TlsCertificateFlags as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"tls-errors\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `tls-errors` getter").unwrap()
        }
    }

    fn get_property_trusted_certificate(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"trusted-certificate\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `trusted-certificate` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_38", feature = "dox"))]
    fn get_property_use_thread_context(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"use-thread-context\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `use-thread-context` getter").unwrap()
        }
    }

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disconnected_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"disconnected\0".as_ptr() as *const _,
                Some(transmute(disconnected_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    //#[cfg(any(feature = "v2_38", feature = "dox"))]
    //fn connect_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored event: Gio.SocketClientEvent
    //    Ignored connection: Gio.IOStream
    //}

    fn connect_new_connection<F: Fn(&Self, &Socket) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn new_connection_trampoline<P, F: Fn(&P, &Socket) + 'static>(this: *mut soup_sys::SoupSocket, new: *mut soup_sys::SoupSocket, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(new))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"new-connection\0".as_ptr() as *const _,
                Some(transmute(new_connection_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_readable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn readable_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"readable\0".as_ptr() as *const _,
                Some(transmute(readable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_writable<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn writable_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"writable\0".as_ptr() as *const _,
                Some(transmute(writable_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_ipv6_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ipv6_only_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ipv6-only\0".as_ptr() as *const _,
                Some(transmute(notify_ipv6_only_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_is_server_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_server_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-server\0".as_ptr() as *const _,
                Some(transmute(notify_is_server_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_non_blocking_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_non_blocking_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::non-blocking\0".as_ptr() as *const _,
                Some(transmute(notify_non_blocking_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_ssl_creds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ssl_creds_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ssl-creds\0".as_ptr() as *const _,
                Some(transmute(notify_ssl_creds_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timeout_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::timeout\0".as_ptr() as *const _,
                Some(transmute(notify_timeout_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_tls_certificate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tls_certificate_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tls-certificate\0".as_ptr() as *const _,
                Some(transmute(notify_tls_certificate_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_tls_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tls_errors_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tls-errors\0".as_ptr() as *const _,
                Some(transmute(notify_tls_errors_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_trusted_certificate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_trusted_certificate_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupSocket, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Socket>
        {
            let f: &F = &*(f as *const F);
            f(&Socket::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::trusted-certificate\0".as_ptr() as *const _,
                Some(transmute(notify_trusted_certificate_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Socket {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Socket")
    }
}
