// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
#[cfg(any(feature = "v2_40", feature = "dox"))]
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use gobject_sys;
use soup_sys;
use std::fmt;
#[cfg(any(feature = "v2_40", feature = "dox"))]
use std::ptr;
use Message;
#[cfg(any(feature = "v2_40", feature = "dox"))]
use MessageHeaders;

glib_wrapper! {
    pub struct MultipartInputStream(Object<soup_sys::SoupMultipartInputStream, soup_sys::SoupMultipartInputStreamClass, MultipartInputStreamClass>) @extends gio::InputStream;

    match fn {
        get_type => || soup_sys::soup_multipart_input_stream_get_type(),
    }
}

impl MultipartInputStream {
    #[cfg(any(feature = "v2_40", feature = "dox"))]
    pub fn new<P: IsA<Message>, Q: IsA<gio::InputStream>>(msg: &P, base_stream: &Q) -> MultipartInputStream {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(soup_sys::soup_multipart_input_stream_new(msg.as_ref().to_glib_none().0, base_stream.as_ref().to_glib_none().0))
        }
    }
}

pub const NONE_MULTIPART_INPUT_STREAM: Option<&MultipartInputStream> = None;

pub trait MultipartInputStreamExt: 'static {
    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn get_headers(&self) -> Option<MessageHeaders>;

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn next_part<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<Option<gio::InputStream>, glib::Error>;

    //#[cfg(any(feature = "v2_40", feature = "dox"))]
    //fn next_part_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(&self, io_priority: /*Ignored*/glib::Priority, cancellable: Option<&P>, callback: Q);

    //
    //#[cfg(any(feature = "v2_40", feature = "dox"))]
    //fn next_part_async_future(&self, io_priority: /*Ignored*/glib::Priority) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::InputStream, glib::Error>> + 'static>>;

    fn get_property_message(&self) -> Option<Message>;
}

impl<O: IsA<MultipartInputStream>> MultipartInputStreamExt for O {
    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn get_headers(&self) -> Option<MessageHeaders> {
        unsafe {
            from_glib_none(soup_sys::soup_multipart_input_stream_get_headers(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn next_part<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<Option<gio::InputStream>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = soup_sys::soup_multipart_input_stream_next_part(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(any(feature = "v2_40", feature = "dox"))]
    //fn next_part_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(&self, io_priority: /*Ignored*/glib::Priority, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call soup_sys:soup_multipart_input_stream_next_part_async() }
    //}

    //
    //#[cfg(any(feature = "v2_40", feature = "dox"))]
    //fn next_part_async_future(&self, io_priority: /*Ignored*/glib::Priority) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::InputStream, glib::Error>> + 'static>> {

        //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    obj.next_part_async(
        //        io_priority,
        //        Some(&cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );

        //    cancellable
        //}))
    //}

    fn get_property_message(&self) -> Option<Message> {
        unsafe {
            let mut value = Value::from_type(<Message as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"message\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `message` getter")
        }
    }
}

impl fmt::Display for MultipartInputStream {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MultipartInputStream")
    }
}
