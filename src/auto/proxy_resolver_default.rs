// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::value::SetValueOptional;
use glib::Value;
use glib_sys;
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ProxyResolverDefault(Object<soup_sys::SoupProxyResolverDefault, soup_sys::SoupProxyResolverDefaultClass, ProxyResolverDefaultClass>);

    match fn {
        get_type => || soup_sys::soup_proxy_resolver_default_get_type(),
    }
}

pub const NONE_PROXY_RESOLVER_DEFAULT: Option<&ProxyResolverDefault> = None;

pub trait ProxyResolverDefaultExt: 'static {
    fn set_property_gproxy_resolver<P: IsA<gio::ProxyResolver> + SetValueOptional>(&self, gproxy_resolver: Option<&P>);

    fn connect_property_gproxy_resolver_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ProxyResolverDefault>> ProxyResolverDefaultExt for O {
    fn set_property_gproxy_resolver<P: IsA<gio::ProxyResolver> + SetValueOptional>(&self, gproxy_resolver: Option<&P>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"gproxy-resolver\0".as_ptr() as *const _, Value::from(gproxy_resolver).to_glib_none().0);
        }
    }

    fn connect_property_gproxy_resolver_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gproxy_resolver_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupProxyResolverDefault, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<ProxyResolverDefault>
        {
            let f: &F = &*(f as *const F);
            f(&ProxyResolverDefault::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::gproxy-resolver\0".as_ptr() as *const _,
                Some(transmute(notify_gproxy_resolver_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for ProxyResolverDefault {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ProxyResolverDefault")
    }
}
