// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_26_3", feature = "dox"))]
use gio;
#[cfg(any(feature = "v2_26_3", feature = "dox"))]
use glib;
use glib::object::IsA;
use glib::translate::*;
use soup_sys;
#[cfg(any(feature = "v2_26_3", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v2_26_3", feature = "dox"))]
use std::ptr;
use SessionFeature;
#[cfg(any(feature = "v2_26_3", feature = "dox"))]
use URI;

glib_wrapper! {
    pub struct ProxyURIResolver(Interface<soup_sys::SoupProxyURIResolver>) @requires SessionFeature;

    match fn {
        get_type => || soup_sys::soup_proxy_uri_resolver_get_type(),
    }
}

pub const NONE_PROXY_URI_RESOLVER: Option<&ProxyURIResolver> = None;

pub trait ProxyURIResolverExt: 'static {
    #[cfg(any(feature = "v2_26_3", feature = "dox"))]
    fn get_proxy_uri_async<P: IsA<gio::Cancellable>, Q: FnOnce(&ProxyURIResolver, u32, &URI) + 'static>(&self, uri: &mut URI, async_context: Option<&glib::MainContext>, cancellable: Option<&P>, callback: Q);

    #[cfg(any(feature = "v2_26_3", feature = "dox"))]
    fn get_proxy_uri_sync<P: IsA<gio::Cancellable>>(&self, uri: &mut URI, cancellable: Option<&P>) -> (u32, URI);
}

impl<O: IsA<ProxyURIResolver>> ProxyURIResolverExt for O {
    #[cfg(any(feature = "v2_26_3", feature = "dox"))]
    fn get_proxy_uri_async<P: IsA<gio::Cancellable>, Q: FnOnce(&ProxyURIResolver, u32, &URI) + 'static>(&self, uri: &mut URI, async_context: Option<&glib::MainContext>, cancellable: Option<&P>, callback: Q) {
        let callback_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn callback_func<P: IsA<gio::Cancellable>, Q: FnOnce(&ProxyURIResolver, u32, &URI) + 'static>(resolver: *mut soup_sys::SoupProxyURIResolver, status: libc::c_uint, proxy_uri: *mut soup_sys::SoupURI, user_data: glib_sys::gpointer) {
            let resolver = from_glib_borrow(resolver);
            let proxy_uri = from_glib_borrow(proxy_uri);
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            (*callback)(&resolver, status, &proxy_uri);
        }
        let callback = Some(callback_func::<P, Q> as _);
        let super_callback0: Box_<Q> = callback_data;
        unsafe {
            soup_sys::soup_proxy_uri_resolver_get_proxy_uri_async(self.as_ref().to_glib_none().0, uri.to_glib_none_mut().0, async_context.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, callback, Box_::into_raw(super_callback0) as *mut _);
        }
    }

    #[cfg(any(feature = "v2_26_3", feature = "dox"))]
    fn get_proxy_uri_sync<P: IsA<gio::Cancellable>>(&self, uri: &mut URI, cancellable: Option<&P>) -> (u32, URI) {
        unsafe {
            let mut proxy_uri = ptr::null_mut();
            let ret = soup_sys::soup_proxy_uri_resolver_get_proxy_uri_sync(self.as_ref().to_glib_none().0, uri.to_glib_none_mut().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut proxy_uri);
            (ret, from_glib_full(proxy_uri))
        }
    }
}

impl fmt::Display for ProxyURIResolver {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ProxyURIResolver")
    }
}
