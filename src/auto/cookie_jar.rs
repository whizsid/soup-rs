// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v2_24", feature = "dox"))]
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use soup_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Cookie;
#[cfg(any(feature = "v2_30", feature = "dox"))]
use CookieJarAcceptPolicy;
#[cfg(any(feature = "v2_24", feature = "dox"))]
use URI;

glib_wrapper! {
    pub struct CookieJar(Object<soup_sys::SoupCookieJar, soup_sys::SoupCookieJarClass, CookieJarClass>);

    match fn {
        get_type => || soup_sys::soup_cookie_jar_get_type(),
    }
}

impl CookieJar {
    #[cfg(any(feature = "v2_24", feature = "dox"))]
    pub fn new() -> CookieJar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(soup_sys::soup_cookie_jar_new())
        }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
impl Default for CookieJar {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_COOKIE_JAR: Option<&CookieJar> = None;

pub trait CookieJarExt: 'static {
    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn add_cookie(&self, cookie: &mut Cookie);

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn add_cookie_full(&self, cookie: &mut Cookie, uri: Option<&mut URI>, first_party: Option<&mut URI>);

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn add_cookie_with_first_party(&self, first_party: &mut URI, cookie: &mut Cookie);

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn all_cookies(&self) -> Vec<Cookie>;

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn delete_cookie(&self, cookie: &mut Cookie);

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_accept_policy(&self) -> CookieJarAcceptPolicy;

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn get_cookie_list(&self, uri: &mut URI, for_http: bool) -> Vec<Cookie>;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_cookies(&self, uri: &mut URI, for_http: bool) -> Option<GString>;

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn is_persistent(&self) -> bool;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn save(&self);

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_accept_policy(&self, policy: CookieJarAcceptPolicy);

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn set_cookie(&self, uri: &mut URI, cookie: &str);

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_cookie_with_first_party(&self, uri: &mut URI, first_party: &mut URI, cookie: &str);

    fn get_property_read_only(&self) -> bool;

    fn connect_changed<F: Fn(&Self, &Cookie, &Cookie) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn connect_property_accept_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<CookieJar>> CookieJarExt for O {
    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn add_cookie(&self, cookie: &mut Cookie) {
        unsafe {
            soup_sys::soup_cookie_jar_add_cookie(self.as_ref().to_glib_none().0, cookie.to_glib_full());
        }
    }

    #[cfg(any(feature = "v2_68", feature = "dox"))]
    fn add_cookie_full(&self, cookie: &mut Cookie, uri: Option<&mut URI>, first_party: Option<&mut URI>) {
        unsafe {
            soup_sys::soup_cookie_jar_add_cookie_full(self.as_ref().to_glib_none().0, cookie.to_glib_full(), uri.to_glib_none_mut().0, first_party.to_glib_none_mut().0);
        }
    }

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn add_cookie_with_first_party(&self, first_party: &mut URI, cookie: &mut Cookie) {
        unsafe {
            soup_sys::soup_cookie_jar_add_cookie_with_first_party(self.as_ref().to_glib_none().0, first_party.to_glib_none_mut().0, cookie.to_glib_full());
        }
    }

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn all_cookies(&self) -> Vec<Cookie> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(soup_sys::soup_cookie_jar_all_cookies(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn delete_cookie(&self, cookie: &mut Cookie) {
        unsafe {
            soup_sys::soup_cookie_jar_delete_cookie(self.as_ref().to_glib_none().0, cookie.to_glib_none_mut().0);
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_accept_policy(&self) -> CookieJarAcceptPolicy {
        unsafe {
            from_glib(soup_sys::soup_cookie_jar_get_accept_policy(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn get_cookie_list(&self, uri: &mut URI, for_http: bool) -> Vec<Cookie> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(soup_sys::soup_cookie_jar_get_cookie_list(self.as_ref().to_glib_none().0, uri.to_glib_none_mut().0, for_http.to_glib()))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_cookies(&self, uri: &mut URI, for_http: bool) -> Option<GString> {
        unsafe {
            from_glib_full(soup_sys::soup_cookie_jar_get_cookies(self.as_ref().to_glib_none().0, uri.to_glib_none_mut().0, for_http.to_glib()))
        }
    }

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    fn is_persistent(&self) -> bool {
        unsafe {
            from_glib(soup_sys::soup_cookie_jar_is_persistent(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn save(&self) {
        unsafe {
            soup_sys::soup_cookie_jar_save(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_accept_policy(&self, policy: CookieJarAcceptPolicy) {
        unsafe {
            soup_sys::soup_cookie_jar_set_accept_policy(self.as_ref().to_glib_none().0, policy.to_glib());
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn set_cookie(&self, uri: &mut URI, cookie: &str) {
        unsafe {
            soup_sys::soup_cookie_jar_set_cookie(self.as_ref().to_glib_none().0, uri.to_glib_none_mut().0, cookie.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_cookie_with_first_party(&self, uri: &mut URI, first_party: &mut URI, cookie: &str) {
        unsafe {
            soup_sys::soup_cookie_jar_set_cookie_with_first_party(self.as_ref().to_glib_none().0, uri.to_glib_none_mut().0, first_party.to_glib_none_mut().0, cookie.to_glib_none().0);
        }
    }

    fn get_property_read_only(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"read-only\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `read-only` getter").unwrap()
        }
    }

    fn connect_changed<F: Fn(&Self, &Cookie, &Cookie) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P, F: Fn(&P, &Cookie, &Cookie) + 'static>(this: *mut soup_sys::SoupCookieJar, old_cookie: *mut soup_sys::SoupCookie, new_cookie: *mut soup_sys::SoupCookie, f: glib_sys::gpointer)
            where P: IsA<CookieJar>
        {
            let f: &F = &*(f as *const F);
            f(&CookieJar::from_glib_borrow(this).unsafe_cast(), &from_glib_borrow(old_cookie), &from_glib_borrow(new_cookie))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute(changed_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn connect_property_accept_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_accept_policy_trampoline<P, F: Fn(&P) + 'static>(this: *mut soup_sys::SoupCookieJar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<CookieJar>
        {
            let f: &F = &*(f as *const F);
            f(&CookieJar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::accept-policy\0".as_ptr() as *const _,
                Some(transmute(notify_accept_policy_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for CookieJar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CookieJar")
    }
}
