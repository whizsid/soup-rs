// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_48", feature = "dox"))]
use gio;
use glib::translate::*;
use glib::GString;
use gobject_sys;
use soup_sys;
use Address;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ClientContext(Boxed<soup_sys::SoupClientContext>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(soup_sys::soup_client_context_get_type(), ptr as *mut _) as *mut soup_sys::SoupClientContext,
        free => |ptr| gobject_sys::g_boxed_free(soup_sys::soup_client_context_get_type(), ptr as *mut _),
        get_type => || soup_sys::soup_client_context_get_type(),
    }
}

impl ClientContext {
    pub fn get_address(&mut self) -> Option<Address> {
        unsafe {
            from_glib_none(soup_sys::soup_client_context_get_address(self.to_glib_none_mut().0))
        }
    }

    //pub fn get_auth_domain(&mut self) -> /*Ignored*/Option<AuthDomain> {
    //    unsafe { TODO: call soup_sys:soup_client_context_get_auth_domain() }
    //}

    pub fn get_auth_user(&mut self) -> Option<GString> {
        unsafe {
            from_glib_none(soup_sys::soup_client_context_get_auth_user(self.to_glib_none_mut().0))
        }
    }

    //#[cfg(any(feature = "v2_48", feature = "dox"))]
    //pub fn get_gsocket(&mut self) -> /*Ignored*/Option<gio::Socket> {
    //    unsafe { TODO: call soup_sys:soup_client_context_get_gsocket() }
    //}

    pub fn get_host(&mut self) -> Option<GString> {
        unsafe {
            from_glib_none(soup_sys::soup_client_context_get_host(self.to_glib_none_mut().0))
        }
    }

    #[cfg(any(feature = "v2_48", feature = "dox"))]
    pub fn get_local_address(&mut self) -> Option<gio::SocketAddress> {
        unsafe {
            from_glib_none(soup_sys::soup_client_context_get_local_address(self.to_glib_none_mut().0))
        }
    }

    #[cfg(any(feature = "v2_48", feature = "dox"))]
    pub fn get_remote_address(&mut self) -> Option<gio::SocketAddress> {
        unsafe {
            from_glib_none(soup_sys::soup_client_context_get_remote_address(self.to_glib_none_mut().0))
        }
    }

    //pub fn get_socket(&mut self) -> /*Ignored*/Option<Socket> {
    //    unsafe { TODO: call soup_sys:soup_client_context_get_socket() }
    //}

    #[cfg(any(feature = "v2_50", feature = "dox"))]
    pub fn steal_connection(&mut self) -> Option<gio::IOStream> {
        unsafe {
            from_glib_full(soup_sys::soup_client_context_steal_connection(self.to_glib_none_mut().0))
        }
    }
}
