// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use soup_sys;
use std::fmt;

glib_wrapper! {
    pub struct SessionAsync(Object<soup_sys::SoupSessionAsync, soup_sys::SoupSessionAsyncClass, SessionAsyncClass>);

    match fn {
        get_type => || soup_sys::soup_session_async_get_type(),
    }
}

impl SessionAsync {
    //pub fn new() -> SessionAsync {
    //    unsafe { TODO: call soup_sys:soup_session_async_new() }
    //}

    //pub fn new_with_options(optname1: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> SessionAsync {
    //    unsafe { TODO: call soup_sys:soup_session_async_new_with_options() }
    //}
}

impl Default for SessionAsync {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SESSION_ASYNC: Option<&SessionAsync> = None;

impl fmt::Display for SessionAsync {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SessionAsync")
    }
}
